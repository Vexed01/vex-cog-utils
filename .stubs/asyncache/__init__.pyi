"""
This type stub file was generated by pyright.
"""

import functools
import inspect
from typing import Any, Callable, ContextManager, Hashable

from _typeshed import IdentityFunction
from cachetools import Cache, keys

__all__ = ["cached"]

def cached(
    cache: Cache, key: Callable[[Any, Any], Hashable] = ..., lock: ContextManager = ...
) -> IdentityFunction:
    """
    Decorator to wrap a function or a coroutine with a memoizing callable
    that saves results in a cache.

    When ``lock`` is provided for a standard function, it's expected to
    implement ``__enter__`` and ``__exit__`` that will be used to lock
    the cache when gets updated. If it wraps a coroutine, ``lock``
    must implement ``__aenter__`` and ``__aexit__``.
    """
    ...
